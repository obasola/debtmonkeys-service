/*
 * Created on 26 Feb 2017 ( Time 16:22:45 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.kumasi.debtmonkeys.service.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import net.kumasi.debtmonkeys.service.domain.AccountType;
import net.kumasi.debtmonkeys.service.domain.jpa.AccountTypeEntity;
import java.util.List;
import net.kumasi.debtmonkeys.service.business.service.mapping.AccountTypeServiceMapper;
import net.kumasi.debtmonkeys.service.persistence.services.jpa.AccountTypePersistenceJPA;
import net.kumasi.debtmonkeys.service.test.AccountTypeFactoryForTest;
import net.kumasi.debtmonkeys.service.test.AccountTypeEntityFactoryForTest;
import net.kumasi.debtmonkeys.service.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of AccountTypeService
 */
@RunWith(MockitoJUnitRunner.class)
public class AccountTypeServiceImplTest {

	@InjectMocks
	private AccountTypeServiceImpl accountTypeService;
	@Mock
	private AccountTypePersistenceJPA accountTypePersistenceJPA;
	@Mock
	private AccountTypeServiceMapper accountTypeServiceMapper;
	
	private AccountTypeFactoryForTest accountTypeFactoryForTest = new AccountTypeFactoryForTest();

	private AccountTypeEntityFactoryForTest accountTypeEntityFactoryForTest = new AccountTypeEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		AccountTypeEntity accountTypeEntity = accountTypePersistenceJPA.load(id);
		
		AccountType accountType = accountTypeFactoryForTest.newAccountType();
		when(accountTypeServiceMapper.mapAccountTypeEntityToAccountType(accountTypeEntity)).thenReturn(accountType);

		// When
		AccountType accountTypeFound = accountTypeService.findById(id);

		// Then
		assertEquals(accountType.getId(),accountTypeFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<AccountTypeEntity> accountTypeEntitys = new ArrayList<AccountTypeEntity>();
		AccountTypeEntity accountTypeEntity1 = accountTypeEntityFactoryForTest.newAccountTypeEntity();
		accountTypeEntitys.add(accountTypeEntity1);
		AccountTypeEntity accountTypeEntity2 = accountTypeEntityFactoryForTest.newAccountTypeEntity();
		accountTypeEntitys.add(accountTypeEntity2);
		when(accountTypePersistenceJPA.loadAll()).thenReturn(accountTypeEntitys);
		
		AccountType accountType1 = accountTypeFactoryForTest.newAccountType();
		when(accountTypeServiceMapper.mapAccountTypeEntityToAccountType(accountTypeEntity1)).thenReturn(accountType1);
		AccountType accountType2 = accountTypeFactoryForTest.newAccountType();
		when(accountTypeServiceMapper.mapAccountTypeEntityToAccountType(accountTypeEntity2)).thenReturn(accountType2);

		// When
		List<AccountType> accountTypesFounds = accountTypeService.findAll();

		// Then
		assertTrue(accountType1 == accountTypesFounds.get(0));
		assertTrue(accountType2 == accountTypesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		AccountType accountType = accountTypeFactoryForTest.newAccountType();

		AccountTypeEntity accountTypeEntity = accountTypeEntityFactoryForTest.newAccountTypeEntity();
		when(accountTypePersistenceJPA.load(accountType.getId())).thenReturn(null);
		
		accountTypeEntity = new AccountTypeEntity();
		accountTypeServiceMapper.mapAccountTypeToAccountTypeEntity(accountType, accountTypeEntity);
		AccountTypeEntity accountTypeEntitySaved = accountTypePersistenceJPA.save(accountTypeEntity);
		
		AccountType accountTypeSaved = accountTypeFactoryForTest.newAccountType();
		when(accountTypeServiceMapper.mapAccountTypeEntityToAccountType(accountTypeEntitySaved)).thenReturn(accountTypeSaved);

		// When
		AccountType accountTypeResult = accountTypeService.create(accountType);

		// Then
		assertTrue(accountTypeResult == accountTypeSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		AccountType accountType = accountTypeFactoryForTest.newAccountType();

		AccountTypeEntity accountTypeEntity = accountTypeEntityFactoryForTest.newAccountTypeEntity();
		when(accountTypePersistenceJPA.load(accountType.getId())).thenReturn(accountTypeEntity);

		// When
		Exception exception = null;
		try {
			accountTypeService.create(accountType);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		AccountType accountType = accountTypeFactoryForTest.newAccountType();

		AccountTypeEntity accountTypeEntity = accountTypeEntityFactoryForTest.newAccountTypeEntity();
		when(accountTypePersistenceJPA.load(accountType.getId())).thenReturn(accountTypeEntity);
		
		AccountTypeEntity accountTypeEntitySaved = accountTypeEntityFactoryForTest.newAccountTypeEntity();
		when(accountTypePersistenceJPA.save(accountTypeEntity)).thenReturn(accountTypeEntitySaved);
		
		AccountType accountTypeSaved = accountTypeFactoryForTest.newAccountType();
		when(accountTypeServiceMapper.mapAccountTypeEntityToAccountType(accountTypeEntitySaved)).thenReturn(accountTypeSaved);

		// When
		AccountType accountTypeResult = accountTypeService.update(accountType);

		// Then
		verify(accountTypeServiceMapper).mapAccountTypeToAccountTypeEntity(accountType, accountTypeEntity);
		assertTrue(accountTypeResult == accountTypeSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		accountTypeService.delete(id);

		// Then
		verify(accountTypePersistenceJPA).delete(id);
		
	}

}
