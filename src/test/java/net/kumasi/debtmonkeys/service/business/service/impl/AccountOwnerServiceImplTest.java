/*
 * Created on 26 Feb 2017 ( Time 16:22:45 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.kumasi.debtmonkeys.service.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import net.kumasi.debtmonkeys.service.domain.AccountOwner;
import net.kumasi.debtmonkeys.service.domain.jpa.AccountOwnerEntity;
import java.util.List;
import net.kumasi.debtmonkeys.service.business.service.mapping.AccountOwnerServiceMapper;
import net.kumasi.debtmonkeys.service.persistence.services.jpa.AccountOwnerPersistenceJPA;
import net.kumasi.debtmonkeys.service.test.AccountOwnerFactoryForTest;
import net.kumasi.debtmonkeys.service.test.AccountOwnerEntityFactoryForTest;
import net.kumasi.debtmonkeys.service.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of AccountOwnerService
 */
@RunWith(MockitoJUnitRunner.class)
public class AccountOwnerServiceImplTest {

	@InjectMocks
	private AccountOwnerServiceImpl accountOwnerService;
	@Mock
	private AccountOwnerPersistenceJPA accountOwnerPersistenceJPA;
	@Mock
	private AccountOwnerServiceMapper accountOwnerServiceMapper;
	
	private AccountOwnerFactoryForTest accountOwnerFactoryForTest = new AccountOwnerFactoryForTest();

	private AccountOwnerEntityFactoryForTest accountOwnerEntityFactoryForTest = new AccountOwnerEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		AccountOwnerEntity accountOwnerEntity = accountOwnerPersistenceJPA.load(id);
		
		AccountOwner accountOwner = accountOwnerFactoryForTest.newAccountOwner();
		when(accountOwnerServiceMapper.mapAccountOwnerEntityToAccountOwner(accountOwnerEntity)).thenReturn(accountOwner);

		// When
		AccountOwner accountOwnerFound = accountOwnerService.findById(id);

		// Then
		assertEquals(accountOwner.getId(),accountOwnerFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<AccountOwnerEntity> accountOwnerEntitys = new ArrayList<AccountOwnerEntity>();
		AccountOwnerEntity accountOwnerEntity1 = accountOwnerEntityFactoryForTest.newAccountOwnerEntity();
		accountOwnerEntitys.add(accountOwnerEntity1);
		AccountOwnerEntity accountOwnerEntity2 = accountOwnerEntityFactoryForTest.newAccountOwnerEntity();
		accountOwnerEntitys.add(accountOwnerEntity2);
		when(accountOwnerPersistenceJPA.loadAll()).thenReturn(accountOwnerEntitys);
		
		AccountOwner accountOwner1 = accountOwnerFactoryForTest.newAccountOwner();
		when(accountOwnerServiceMapper.mapAccountOwnerEntityToAccountOwner(accountOwnerEntity1)).thenReturn(accountOwner1);
		AccountOwner accountOwner2 = accountOwnerFactoryForTest.newAccountOwner();
		when(accountOwnerServiceMapper.mapAccountOwnerEntityToAccountOwner(accountOwnerEntity2)).thenReturn(accountOwner2);

		// When
		List<AccountOwner> accountOwnersFounds = accountOwnerService.findAll();

		// Then
		assertTrue(accountOwner1 == accountOwnersFounds.get(0));
		assertTrue(accountOwner2 == accountOwnersFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		AccountOwner accountOwner = accountOwnerFactoryForTest.newAccountOwner();

		AccountOwnerEntity accountOwnerEntity = accountOwnerEntityFactoryForTest.newAccountOwnerEntity();
		when(accountOwnerPersistenceJPA.load(accountOwner.getId())).thenReturn(null);
		
		accountOwnerEntity = new AccountOwnerEntity();
		accountOwnerServiceMapper.mapAccountOwnerToAccountOwnerEntity(accountOwner, accountOwnerEntity);
		AccountOwnerEntity accountOwnerEntitySaved = accountOwnerPersistenceJPA.save(accountOwnerEntity);
		
		AccountOwner accountOwnerSaved = accountOwnerFactoryForTest.newAccountOwner();
		when(accountOwnerServiceMapper.mapAccountOwnerEntityToAccountOwner(accountOwnerEntitySaved)).thenReturn(accountOwnerSaved);

		// When
		AccountOwner accountOwnerResult = accountOwnerService.create(accountOwner);

		// Then
		assertTrue(accountOwnerResult == accountOwnerSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		AccountOwner accountOwner = accountOwnerFactoryForTest.newAccountOwner();

		AccountOwnerEntity accountOwnerEntity = accountOwnerEntityFactoryForTest.newAccountOwnerEntity();
		when(accountOwnerPersistenceJPA.load(accountOwner.getId())).thenReturn(accountOwnerEntity);

		// When
		Exception exception = null;
		try {
			accountOwnerService.create(accountOwner);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		AccountOwner accountOwner = accountOwnerFactoryForTest.newAccountOwner();

		AccountOwnerEntity accountOwnerEntity = accountOwnerEntityFactoryForTest.newAccountOwnerEntity();
		when(accountOwnerPersistenceJPA.load(accountOwner.getId())).thenReturn(accountOwnerEntity);
		
		AccountOwnerEntity accountOwnerEntitySaved = accountOwnerEntityFactoryForTest.newAccountOwnerEntity();
		when(accountOwnerPersistenceJPA.save(accountOwnerEntity)).thenReturn(accountOwnerEntitySaved);
		
		AccountOwner accountOwnerSaved = accountOwnerFactoryForTest.newAccountOwner();
		when(accountOwnerServiceMapper.mapAccountOwnerEntityToAccountOwner(accountOwnerEntitySaved)).thenReturn(accountOwnerSaved);

		// When
		AccountOwner accountOwnerResult = accountOwnerService.update(accountOwner);

		// Then
		verify(accountOwnerServiceMapper).mapAccountOwnerToAccountOwnerEntity(accountOwner, accountOwnerEntity);
		assertTrue(accountOwnerResult == accountOwnerSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		accountOwnerService.delete(id);

		// Then
		verify(accountOwnerPersistenceJPA).delete(id);
		
	}

}
