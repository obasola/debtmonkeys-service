/*
 * Created on 26 Feb 2017 ( Time 16:22:45 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.kumasi.debtmonkeys.service.business.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import net.kumasi.debtmonkeys.service.business.service.PaymentHistoryService;
import net.kumasi.debtmonkeys.service.business.service.mapping.PaymentHistoryServiceMapper;
import net.kumasi.debtmonkeys.service.domain.PaymentHistory;
import net.kumasi.debtmonkeys.service.domain.jpa.PaymentHistoryEntity;
import net.kumasi.debtmonkeys.service.persistence.PersistenceServiceProvider;
import net.kumasi.debtmonkeys.service.persistence.services.PaymentHistoryPersistence;

/**
 * Implementation of PaymentHistoryService
 */
@Component
public class PaymentHistoryServiceImpl implements PaymentHistoryService {

	private PaymentHistoryPersistence paymentHistoryPersistence;

	@Resource
	private PaymentHistoryServiceMapper paymentHistoryServiceMapper;
	
	public PaymentHistoryServiceImpl() {
		paymentHistoryPersistence = PersistenceServiceProvider.getService(PaymentHistoryPersistence.class);
	}
		
	@Override
	public PaymentHistory findById(Integer idpaymentHistory) {
		PaymentHistoryEntity entity = paymentHistoryPersistence.load(idpaymentHistory);
		return paymentHistoryServiceMapper.mapPaymentHistoryEntityToPaymentHistory(entity);
	}

	
	@Override
	public List<PaymentHistory> findByAccount(Integer idAccount) {
		String queryName="PaymentHistoryEntity.byAccountId";
		Map<String, Object> params = new HashMap<String, Object>();
		
		params.put("accountId", idAccount);
		
		List<PaymentHistoryEntity> entities = paymentHistoryPersistence.loadByNamedQuery(queryName, params);
		
		List<PaymentHistory> beans = new ArrayList<PaymentHistory>();
		for(PaymentHistoryEntity entity : entities) {
			beans.add(paymentHistoryServiceMapper.mapPaymentHistoryEntityToPaymentHistory(entity));
		}
		return beans;
	}

	@Override
	public List<PaymentHistory> findAll() {
		List<PaymentHistoryEntity> entities = paymentHistoryPersistence.loadAll();
		List<PaymentHistory> beans = new ArrayList<PaymentHistory>();
		for(PaymentHistoryEntity entity : entities) {
			beans.add(paymentHistoryServiceMapper.mapPaymentHistoryEntityToPaymentHistory(entity));
		}
		return beans;
	}

	@Override
	public PaymentHistory save(PaymentHistory paymentHistory) {
		return update(paymentHistory) ;
	}

	@Override
	public PaymentHistory create(PaymentHistory paymentHistory) {
		if(paymentHistoryPersistence.load(paymentHistory.getIdpaymentHistory()) != null) {
			throw new IllegalStateException("already.exists");
		}
		PaymentHistoryEntity paymentHistoryEntity = new PaymentHistoryEntity();
		paymentHistoryServiceMapper.mapPaymentHistoryToPaymentHistoryEntity(paymentHistory, paymentHistoryEntity);
		PaymentHistoryEntity paymentHistoryEntitySaved = paymentHistoryPersistence.save(paymentHistoryEntity);
		return paymentHistoryServiceMapper.mapPaymentHistoryEntityToPaymentHistory(paymentHistoryEntitySaved);
	}

	@Override
	public PaymentHistory update(PaymentHistory paymentHistory) {
		PaymentHistoryEntity paymentHistoryEntity = paymentHistoryPersistence.load(paymentHistory.getIdpaymentHistory());
		paymentHistoryServiceMapper.mapPaymentHistoryToPaymentHistoryEntity(paymentHistory, paymentHistoryEntity);
		PaymentHistoryEntity paymentHistoryEntitySaved = paymentHistoryPersistence.save(paymentHistoryEntity);
		return paymentHistoryServiceMapper.mapPaymentHistoryEntityToPaymentHistory(paymentHistoryEntitySaved);
	}

	@Override
	public void delete(Integer idpaymentHistory) {
		paymentHistoryPersistence.delete(idpaymentHistory);
	}

	public PaymentHistoryPersistence getPaymentHistoryPersistence() {
		return paymentHistoryPersistence;
	}

	public void setPaymentHistoryPersistence(PaymentHistoryPersistence paymentHistoryPersistence) {
		this.paymentHistoryPersistence = paymentHistoryPersistence;
	}

	public PaymentHistoryServiceMapper getPaymentHistoryServiceMapper() {
		return paymentHistoryServiceMapper;
	}

	public void setPaymentHistoryServiceMapper(PaymentHistoryServiceMapper paymentHistoryServiceMapper) {
		this.paymentHistoryServiceMapper = paymentHistoryServiceMapper;
	}

}
