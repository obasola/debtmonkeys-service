/*
 * Created on 26 Feb 2017 ( Time 16:22:45 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.kumasi.debtmonkeys.service.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import net.kumasi.debtmonkeys.service.domain.AccountOwner;
import net.kumasi.debtmonkeys.service.domain.jpa.AccountOwnerEntity;
import java.util.List;
import net.kumasi.debtmonkeys.service.business.service.AccountOwnerService;
import net.kumasi.debtmonkeys.service.business.service.mapping.AccountOwnerServiceMapper;
import net.kumasi.debtmonkeys.service.persistence.PersistenceServiceProvider;
import net.kumasi.debtmonkeys.service.persistence.services.AccountOwnerPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of AccountOwnerService
 */
@Component
public class AccountOwnerServiceImpl implements AccountOwnerService {

	private AccountOwnerPersistence accountOwnerPersistence;

	@Resource
	private AccountOwnerServiceMapper accountOwnerServiceMapper;
	
	public AccountOwnerServiceImpl() {
		accountOwnerPersistence = PersistenceServiceProvider.getService(AccountOwnerPersistence.class);
	}
		
	@Override
	public AccountOwner findById(Integer id) {
		AccountOwnerEntity entity = accountOwnerPersistence.load(id);
		return accountOwnerServiceMapper.mapAccountOwnerEntityToAccountOwner(entity);
	}

	@Override
	public List<AccountOwner> findAll() {
		List<AccountOwnerEntity> entities = accountOwnerPersistence.loadAll();
		List<AccountOwner> beans = new ArrayList<AccountOwner>();
		for(AccountOwnerEntity entity : entities) {
			beans.add(accountOwnerServiceMapper.mapAccountOwnerEntityToAccountOwner(entity));
		}
		return beans;
	}

	@Override
	public AccountOwner save(AccountOwner accountOwner) {
		return update(accountOwner) ;
	}

	@Override
	public AccountOwner create(AccountOwner accountOwner) {
		if(accountOwnerPersistence.load(accountOwner.getId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		AccountOwnerEntity accountOwnerEntity = new AccountOwnerEntity();
		accountOwnerServiceMapper.mapAccountOwnerToAccountOwnerEntity(accountOwner, accountOwnerEntity);
		AccountOwnerEntity accountOwnerEntitySaved = accountOwnerPersistence.save(accountOwnerEntity);
		return accountOwnerServiceMapper.mapAccountOwnerEntityToAccountOwner(accountOwnerEntitySaved);
	}

	@Override
	public AccountOwner update(AccountOwner accountOwner) {
		AccountOwnerEntity accountOwnerEntity = accountOwnerPersistence.load(accountOwner.getId());
		accountOwnerServiceMapper.mapAccountOwnerToAccountOwnerEntity(accountOwner, accountOwnerEntity);
		AccountOwnerEntity accountOwnerEntitySaved = accountOwnerPersistence.save(accountOwnerEntity);
		return accountOwnerServiceMapper.mapAccountOwnerEntityToAccountOwner(accountOwnerEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		accountOwnerPersistence.delete(id);
	}

	public AccountOwnerPersistence getAccountOwnerPersistence() {
		return accountOwnerPersistence;
	}

	public void setAccountOwnerPersistence(AccountOwnerPersistence accountOwnerPersistence) {
		this.accountOwnerPersistence = accountOwnerPersistence;
	}

	public AccountOwnerServiceMapper getAccountOwnerServiceMapper() {
		return accountOwnerServiceMapper;
	}

	public void setAccountOwnerServiceMapper(AccountOwnerServiceMapper accountOwnerServiceMapper) {
		this.accountOwnerServiceMapper = accountOwnerServiceMapper;
	}

}
